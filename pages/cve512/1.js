import { useState } from "react";
import { BsFillInfoCircleFill } from "react-icons/bs";

export default function Calc() {
  const [momentAB, setMomentAB] = useState();
  const [momentBA, setMomentBA] = useState();
  const [momentBC, setMomentBC] = useState();
  const [momentCB, setMomentCB] = useState();
  const [lengthAB, setLengthAB] = useState();
  const [lengthBC, setLengthBC] = useState();
  const [udlAB, setUdlAB] = useState();
  const [udlBC, setUdlBC] = useState();
  const [info, setInfos] = useState();

  function openInfo() {
    setInfos((prev) => !prev);
  }
  let erdalAB = Math.round(((udlAB * lengthAB) / 2) * 100) / 100;
  let erdalBC = Math.round(((udlBC * lengthBC) / 2) * 100) / 100;
  let mmtSumAB = Math.abs(parseFloat(momentAB) + parseFloat(momentBA));
  console.log(mmtSumAB);

  let mmtDivAB = mmtSumAB / lengthAB;
  let erdamAB = "";
  let erdamBA = "";
  if (Math.abs(momentAB) > Math.abs(momentBA)) {
    erdamAB = Math.round(mmtDivAB * 100) / 100;
    erdamBA = Math.round(-mmtDivAB * 100) / 100;
  } else {
    erdamAB = Math.round(-mmtDivAB * 100) / 100;
    erdamBA = Math.round(mmtDivAB * 100) / 100;
  }

  let mmtSumBC = Math.abs(parseFloat(momentBC) + parseFloat(momentCB));
  let mmtDivBC = mmtSumBC / lengthBC;
  let erdamBC = "";
  let erdamCB = "";
  if (Math.abs(momentAB) > Math.abs(momentBA)) {
    erdamBC = Math.round(mmtDivBC * 100) / 100;
    erdamCB = Math.round(-mmtDivBC * 100) / 100;
  } else {
    erdamBC = Math.round(-mmtDivBC * 100) / 100;
    erdamCB = Math.round(mmtDivBC * 100) / 100;
  }

  let shearForceAB = Math.round((erdalAB + erdamAB) * 100) / 100;
  let shearForceBA = Math.round((erdalAB + erdamBA) * 100) / 100;
  let shearForceBC = Math.round((erdalBC + erdamBC) * 100) / 100;
  let shearForceCB = Math.round((erdalBC + erdamCB) * 100) / 100;

  let maxMmtAB =
    Math.round(
      (Math.pow(shearForceAB, 2) / (2 * parseFloat(udlAB)) +
        parseFloat(momentAB)) *
        100
    ) / 100;
  let maxMmtBC =
    Math.round(
      (Math.pow(shearForceBC, 2) / (2 * parseFloat(udlBC)) +
        parseFloat(momentBC)) *
        100
    ) / 100;
  return (
    <div className="span">
      <h2 style={{ textAlign: "center" }}>
        UDL Loaded Beam Span Moment Using Support Moment From Moment
        Distribution Method of Analysis For Two Spans
      </h2>
      <p style={{ display: "flex", alignItems: "center" }}>
        click <button onClick={openInfo}>info</button>{" "}
        {/* <BsFillInfoCircleFill />  */}
        for more info on a particular row
      </p>
      {info && (
        <div
          style={{
            backgroundColor: "#f0f0f0",
            borderRadius: "2rem",
            padding: "1rem",
            height: "fit-content",
            marginBottom: "2rem",
          }}
        >
          <ul>
            <li>
              <b>Support Moment:</b> Support moment is the final moment gotten
              from the moment distribution
            </li>
            <li>
              <b>Span length:</b> This is the length of each beam span
            </li>
            <li>
              <b>UDL:</b> Udl is load on the a particular beam in kN/m
              <sup>2</sup>
            </li>
            <li>
              <b>ERDAL:</b>This gotten from <i>udl*L/2</i>
            </li>
            <li>
              <b>ERDAM:</b> This gotten from
              <i>
                (sum of support moment for a particular span)/L. It is negative
                when the support at one end is less than that at the other end
                and vise versa
              </i>
            </li>
            <li>
              <b>S.force:</b> Shear force is gotten by the sum of ERDAL and
              ERDAM
            </li>
            <li>
              <b>Reaction:</b> This gotten by carrying down the S.force for
              <i> end support</i> and for the
              <i>
                internal support, it is gotten by adding the two S.force on that
                support
              </i>
            </li>
            <li>
              <b>Moment:</b> This is gotten from{" "}
              <i>
                M<sub>max</sub> = R<sub>ab</sub>
                <sup>2</sup>/2udl + M<sub>ab</sub>
              </i>{" "}
              for span AB and{" "}
              <i>
                M<sub>max</sub> = R<sub>bc</sub>
                <sup>2</sup>/2udl + M<sub>bc</sub>
              </i>{" "}
              for span BC
            </li>
            <br />
            <button onClick={openInfo}>close info</button>
          </ul>
        </div>
      )}
      <div className="section">
        <div className="title">Span</div>
        <div className="spanOne">
          <div className="spanAB">AB</div>
          <div className="spanBA">BA</div>
        </div>
        <div className="spanTwo">
          <div className="spanBC">BC</div>
          <div className="spanCB">CB</div>
        </div>
      </div>
      <div className="support">
        <div className="title">Support Moment</div>
        <div className="spanOne">
          <input
            type="text"
            placeholder="enter Mab"
            value={momentAB}
            onChange={(e) => setMomentAB(e.target.value)}
            style={{ width: "44%", textAlign: "center", margin: "0.1rem" }}
          />
          <input
            type="text"
            placeholder="enter Mba"
            value={momentBA}
            onChange={(e) => setMomentBA(e.target.value)}
            style={{ width: "44%", textAlign: "center", margin: "0.1rem" }}
          />
        </div>
        <div className="spanTwo">
          <input
            type="text"
            placeholder="enter Mbc"
            value={momentBC}
            onChange={(e) => setMomentBC(e.target.value)}
            style={{ width: "44%", textAlign: "center", margin: "0.1rem" }}
          />
          <input
            type="text"
            placeholder="enter Mcb"
            value={momentCB}
            onChange={(e) => setMomentCB(e.target.value)}
            style={{ width: "44%", textAlign: "center", margin: "0.1rem" }}
          />
        </div>
      </div>
      <div className="length">
        <div className="title">Span length</div>
        <div className="spanOne">
          <input
            type="text"
            placeholder="enter length AB"
            value={lengthAB}
            onChange={(e) => setLengthAB(e.target.value)}
            style={{ width: "90%", textAlign: "center" }}
          />
        </div>
        <div className="spanTwo">
          <input
            type="text"
            placeholder="enter length BC"
            value={lengthBC}
            onChange={(e) => setLengthBC(e.target.value)}
            style={{ width: "90%", textAlign: "center" }}
          />
        </div>
      </div>
      <div className="support">
        <div className="title">UDL</div>
        <div className="spanOne">
          <input
            type="text"
            placeholder="enter udl load on AB"
            value={udlAB}
            onChange={(e) => setUdlAB(e.target.value)}
            style={{ width: "90%", textAlign: "center" }}
          />
        </div>
        <div className="spanTwo">
          <input
            type="text"
            placeholder="enter udl load on BC"
            value={udlBC}
            onChange={(e) => setUdlBC(e.target.value)}
            style={{ width: "90%", textAlign: "center" }}
          />
        </div>
      </div>
      <div className="erdal">
        <div className="title">ERDAL</div>
        <div className="spanOne">
          <div className="spanAB">{erdalAB}</div>
          <div className="spanBA">{erdalAB}</div>
        </div>
        <div className="spanTwo">
          <div className="spanBC">{erdalBC}</div>
          <div className="spanCB">{erdalBC}</div>
        </div>
      </div>
      <div className="erdam">
        <div className="title">ERDAM</div>
        <div className="spanOne">
          <div className="spanAB">{erdamAB}</div>
          <div className="spanBA">{erdamBA}</div>
        </div>
        <div className="spanTwo">
          <div className="spanBC">{erdamBC}</div>
          <div className="spanCB">{erdamCB}</div>
        </div>
      </div>
      <div className="shear-force">
        <div className="title">S.force</div>
        <div className="spanOne">
          <div className="spanAB">{shearForceAB}</div>
          <div className="spanBA">{shearForceBA}</div>
        </div>
        <div className="spanTwo">
          <div className="spanBC">{shearForceBC}</div>
          <div className="spanCB">{shearForceCB}</div>
        </div>
      </div>
      <div className="reaction">
        <div className="title">Reaction</div>
        <div className="spanOne">
          <div className="spanAB">{shearForceAB}</div>
          <div className="spanBA-support">{shearForceBA + shearForceBC}</div>
        </div>
        <div className="spanTwo">
          <div className="spanBC"></div>
          <div className="spanCB">{shearForceCB}</div>
        </div>
      </div>
      <div className="moment">
        <div className="title">Span Moment</div>
        <div className="spanOne">
          <div className="spanAB">{maxMmtAB}</div>
          <div className="spanBA"></div>
        </div>
        <div className="spanTwo">
          <div className="spanBC"></div>
          <div className="spanCB">{maxMmtBC}</div>
        </div>
      </div>
    </div>
  );
}
